        -:    0:Source:/mnt/c/Users/lior3/CLionProjects/untitled8/lexer.c
        -:    0:Graph:/mnt/c/Users/lior3/CLionProjects/untitled8/cmake-build-debug-wsl-coverage/CMakeFiles/Assembler.dir/lexer.c.gcno
        -:    0:Data:/mnt/c/Users/lior3/CLionProjects/untitled8/cmake-build-debug-wsl-coverage/CMakeFiles/Assembler.dir/lexer.c.gcda
        -:    0:Runs:1
        -:    1:#include "lexer.h"
        -:    2:#include "firstPass.h"
        -:    3:#include <stdlib.h>
        -:    4:#include <string.h>
        -:    5:#include <ctype.h>
        -:    6:
function getLexTreePosition called 0 returned 0% blocks executed 0%
    #####:    7:lexStruct * getLexTreePosition(lineStr *line, symbolTable *labelTable, int * IC, int * DC, macroTable *macroTable){
    #####:    8:    lexStruct *lexTree=NULL;
        -:    9:    opCode instName;
    #####:   10:    bool labelFlag = false, dirFlag = false, instFlag = false;
    #####:   11:    char **lineC = line->lineContent;
    #####:   12:    label *currLabel = NULL;
    #####:   13:    char *token =NULL,*ptr = NULL;
    #####:   14:    int len = 0,index = 0;
    #####:   15:    ALLOCATE(lexTree, sizeof(lexStruct));
    %%%%%:   15-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   15-block  1
call    2 never executed
call    3 never executed
    #####:   16:    ALLOCATE(ptr, MAX_LINE_LENGTH);
    %%%%%:   16-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   16-block  1
call    2 never executed
call    3 never executed
    #####:   17:    lexTree->label = NULL;
        -:   18:
    #####:   19:    for(index = 0; index < line->size; index++) {
    %%%%%:   19-block  0
    %%%%%:   19-block  1
    %%%%%:   19-block  2
branch  0 never executed
branch  1 never executed
        -:   20:
    #####:   21:        ptr =   strcpy(ptr,lineC[index]);
    #####:   22:        len = (int) strlen(ptr);
    #####:   23:        ptr[len] = '\0';
        -:   24:
    #####:   25:        if (len > 0 && ptr[len-1]  == ':') {
    %%%%%:   25-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   25-block  1
branch  2 never executed
branch  3 never executed
    #####:   26:            ptr[len-1] = '\0';
    #####:   27:            if (!isValidLabel(ptr, line->lineNum, labelTable, macroTable)) {
    %%%%%:   27-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   28:                return NULL;
    %%%%%:   28-block  0
        -:   29:            }
    #####:   30:            if (strlen(*lineC)>index+1 && (strstr(lineC[index+1],"extern")  || strstr(lineC[index+1],"entry"))){
    %%%%%:   30-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   30-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:   30-block  2
branch  4 never executed
branch  5 never executed
    #####:   31:                printf("Warning label was define before entry\\extern in line: %d \n", line->lineNum);
    %%%%%:   31-block  0
call    0 never executed
    #####:   32:                continue;
        -:   33:            }
    #####:   34:            if((currLabel = getLabel(ptr, labelTable)) == NULL){
    %%%%%:   34-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   35:                insertLabelTable(ptr, labelTable, line->lineNum, &lexTree->label, notEntryOrExtern,true);
    %%%%%:   35-block  0
call    0 never executed
    #####:   36:            }else if (currLabel->defineType == notEntryOrExtern ){
    %%%%%:   36-block  0
branch  0 never executed
branch  1 never executed
    #####:   37:                printf("Error in line: %d , label was define before \n", line->lineNum);
    %%%%%:   37-block  0
call    0 never executed
    #####:   38:                return NULL;
    #####:   39:            } else if(currLabel->defineType == externLabel){
    %%%%%:   39-block  0
branch  0 never executed
branch  1 never executed
    #####:   40:                printf("Error in line: %d ,can't define extern label  \n", line->lineNum);
    %%%%%:   40-block  0
call    0 never executed
    #####:   41:                return NULL;
    #####:   42:            }else if(currLabel->defineType == operandDefined){
    %%%%%:   42-block  0
branch  0 never executed
branch  1 never executed
    #####:   43:                currLabel->defineType = notEntryOrExtern;
    %%%%%:   43-block  0
    #####:   44:            }else if(currLabel->address != 0){
    %%%%%:   44-block  0
branch  0 never executed
branch  1 never executed
    #####:   45:                printf("Error in line: %d ,label was define before \n", line->lineNum);
    %%%%%:   45-block  0
call    0 never executed
    #####:   46:                return NULL;
        -:   47:            }
    #####:   48:            if(currLabel != NULL && !currLabel->defined){
    %%%%%:   48-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   48-block  1
branch  2 never executed
branch  3 never executed
    #####:   49:                currLabel->defined = true;
    %%%%%:   49-block  0
        -:   50:            }
        -:   51:
    #####:   52:            labelFlag = true;
    #####:   53:            continue;
    %%%%%:   53-block  0
        -:   54:        }
    #####:   55:        else if (strchr(ptr, '.') != NULL && dirFlag == false) {
    %%%%%:   55-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   55-block  1
branch  2 never executed
branch  3 never executed
    #####:   56:            strcpy(ptr, lineC[index]);
    #####:   57:            if (strcmp(ptr, ".data") == 0) {
    %%%%%:   57-block  0
branch  0 never executed
branch  1 never executed
    #####:   58:                lexTree->lexType.dirType.lexDirType = lexDirData;
    %%%%%:   58-block  0
    #####:   59:            } else if (strcmp(ptr, ".string")== 0) {
    %%%%%:   59-block  0
branch  0 never executed
branch  1 never executed
    #####:   60:                lexTree->lexType.dirType.lexDirType = lexDirString;
    %%%%%:   60-block  0
    #####:   61:            } else if (strcmp(ptr, ".entry")== 0) {
    %%%%%:   61-block  0
branch  0 never executed
branch  1 never executed
    #####:   62:                lexTree->lexType.dirType.lexDirType = lexDirEntry;
    %%%%%:   62-block  0
    #####:   63:            } else if (strcmp(ptr, ".extern")== 0) {
    %%%%%:   63-block  0
branch  0 never executed
branch  1 never executed
    #####:   64:                lexTree->lexType.dirType.lexDirType = lexDirExtern;
    %%%%%:   64-block  0
        -:   65:            } else {
    #####:   66:                printf("Error in lineStr %d: invalid directive\n", line->lineNum);
    %%%%%:   66-block  0
call    0 never executed
    #####:   67:                return NULL;
        -:   68:            }
    #####:   69:            lexTree->lineType = lexDir;
    #####:   70:            dirFlag = true;
    #####:   71:            continue;
    %%%%%:   71-block  0
        -:   72:        }
    #####:   73:        else if (dirFlag) {
    %%%%%:   73-block  0
branch  0 never executed
branch  1 never executed
    #####:   74:            if (lexTree->lexType.dirType.lexDirType == lexDirData){
    %%%%%:   74-block  0
branch  0 never executed
branch  1 never executed
    #####:   75:                if(!getData(ptr, lexTree->lexType.dirType.dirUnionContent.dataType.numArray,
    %%%%%:   75-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   76:                        &lexTree->lexType.dirType.dirUnionContent.dataType.numCount, &line->lineNum,lexTree->label)){
    #####:   77:                    return NULL;
    %%%%%:   77-block  0
        -:   78:                }
    #####:   79:                if (labelFlag) {
    %%%%%:   79-block  0
branch  0 never executed
branch  1 never executed
    #####:   80:                    if (lexTree->label == NULL) {
    %%%%%:   80-block  0
branch  0 never executed
branch  1 never executed
    #####:   81:                        lexTree->label = currLabel;
    %%%%%:   81-block  0
        -:   82:                    }
    #####:   83:                    lexTree->label->address = *DC+100+*IC;
    %%%%%:   83-block  0
        -:   84:                }
    #####:   85:                *DC += lexTree->lexType.dirType.dirUnionContent.dataType.numCount;
    %%%%%:   85-block  0
    #####:   86:            } else if (lexTree->lexType.dirType.lexDirType == lexDirString) {
    %%%%%:   86-block  0
branch  0 never executed
branch  1 never executed
    #####:   87:                if (ptr[0] != '"'|| ptr[len-1] != '"') {
    %%%%%:   87-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   87-block  1
branch  2 never executed
branch  3 never executed
    #####:   88:                    printf("Error in lineStr %d: invalid string\n", line->lineNum);
    %%%%%:   88-block  0
call    0 never executed
    #####:   89:                    return NULL;
        -:   90:                }
    #####:   91:                ptr[len-1] = '\0';
    #####:   92:                ptr++;
    #####:   93:                strcpy(lexTree->lexType.dirType.dirUnionContent.stringType,ptr );
    #####:   94:                makeStringBitArray( ptr,lexTree->lexType.dirType.dirBitArray);
    %%%%%:   94-block  0
call    0 never executed
    #####:   95:                if (labelFlag) {
branch  0 never executed
branch  1 never executed
    #####:   96:                    if (lexTree->label == NULL) {
    %%%%%:   96-block  0
branch  0 never executed
branch  1 never executed
    #####:   97:                        lexTree->label = currLabel;
    %%%%%:   97-block  0
        -:   98:                    }
    #####:   99:                    lexTree->label->address = *DC+100 + *IC;
    %%%%%:   99-block  0
        -:  100:                }
    #####:  101:                *DC += strlen(ptr)+1;
    %%%%%:  101-block  0
    #####:  102:            }else if (lexTree->lexType.dirType.lexDirType == lexDirEntry) {
    %%%%%:  102-block  0
branch  0 never executed
branch  1 never executed
    #####:  103:                if((currLabel = getLabel(ptr, labelTable)) == NULL){
    %%%%%:  103-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  104:                    insertLabelTable(ptr, labelTable, line->lineNum,&lexTree->label,entryLabel,false);
    %%%%%:  104-block  0
call    0 never executed
    #####:  105:                }else if(currLabel->defineType == notEntryOrExtern ||currLabel->defineType == operandDefined){
    %%%%%:  105-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  105-block  1
branch  2 never executed
branch  3 never executed
    #####:  106:                        currLabel->defineType = entryLabel;
    %%%%%:  106-block  0
    #####:  107:                }else if(currLabel->defineType == entryLabel){
    %%%%%:  107-block  0
branch  0 never executed
branch  1 never executed
    #####:  108:                    printf("Warning in line: %d , label was define before \n", line->lineNum);
    %%%%%:  108-block  0
call    0 never executed
        -:  109:                }else {
    #####:  110:                    printf("Error in line: %d , label was define as extern \n", line->lineNum);
    %%%%%:  110-block  0
call    0 never executed
    #####:  111:                    return NULL;
        -:  112:                }
    #####:  113:            }else if (lexTree->lexType.dirType.lexDirType == lexDirExtern) {
    %%%%%:  113-block  0
branch  0 never executed
branch  1 never executed
    #####:  114:                token = strtok(ptr, " ,");
    %%%%%:  114-block  0
call    0 never executed
    #####:  115:                while (token != NULL) {
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:                    if ((currLabel = getLabel(token, labelTable)) == NULL) {
    %%%%%:  116-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  117:                        insertLabelTable(token, labelTable, line->lineNum, &lexTree->label, externLabel,false);
    %%%%%:  117-block  0
call    0 never executed
    #####:  118:                        currLabel = getLabel(token, labelTable);
call    0 never executed
    #####:  119:                    } else if (currLabel->defineType == notEntryOrExtern || currLabel->defineType == operandDefined) {
    %%%%%:  119-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  119-block  1
branch  2 never executed
branch  3 never executed
    #####:  120:                        currLabel->defineType = externLabel;
    %%%%%:  120-block  0
    #####:  121:                    } else if (currLabel->defineType == externLabel) {
    %%%%%:  121-block  0
branch  0 never executed
branch  1 never executed
    #####:  122:                        printf("Warning in line: %d , label was define before \n", line->lineNum);
    %%%%%:  122-block  0
call    0 never executed
        -:  123:                    } else {
    #####:  124:                        printf("Error in line: %d , label was define as entry \n", line->lineNum);
    %%%%%:  124-block  0
call    0 never executed
    #####:  125:                        return NULL;
        -:  126:                    }
    #####:  127:                    currLabel->address = 1;
    #####:  128:                    token = strtok(NULL, " ,");
    %%%%%:  128-block  0
call    0 never executed
        -:  129:                }
        -:  130:            }else {
    #####:  131:                printf("Error in lineStr %d: invalid directive\n", line->lineNum);
    %%%%%:  131-block  0
call    0 never executed
    #####:  132:                return NULL;
        -:  133:            }
    #####:  134:        } else if (( instName = (opCode)getOpCode(ptr, &line->lineNum,&lexTree->lexType.instType.numOfOperands)) != -1) {
    %%%%%:  134-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  135:                lexTree->lexType.instType.instName = instName;
    #####:  136:                lexTree->lexType.instType.asm_inst_sets.twoOpeInstType.arrOpType[0] = -1;
    #####:  137:                lexTree->lexType.instType.asm_inst_sets.twoOpeInstType.arrOpType[1] = -1;
    #####:  138:                instFlag = true;
    #####:  139:                if (labelFlag) {
    %%%%%:  139-block  0
branch  0 never executed
branch  1 never executed
    #####:  140:                    if(lexTree->label == NULL)
    %%%%%:  140-block  0
branch  0 never executed
branch  1 never executed
    #####:  141:                        lexTree->label = currLabel;
    %%%%%:  141-block  0
    #####:  142:                    lexTree->label->address = (*DC)+100+(*IC);
    %%%%%:  142-block  0
        -:  143:                }
    #####:  144:                *IC += 1 + lexTree->lexType.instType.numOfOperands;
    #####:  145:                lexTree->lineType = lexInst;
    %%%%%:  145-block  0
    #####:  146:        }else if(instFlag){
    %%%%%:  146-block  0
branch  0 never executed
branch  1 never executed
    #####:  147:            if (!getOperands(ptr,lexTree ,&line->lineNum, labelTable, macroTable)){
    %%%%%:  147-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  148:                return NULL;
    %%%%%:  148-block  0
        -:  149:            }
    #####:  150:            if(lexTree->lexType.instType.asm_inst_sets.twoOpeInstType.arrOpType[0] == registerType && lexTree->lexType.instType.asm_inst_sets.twoOpeInstType.arrOpType[1] == registerType){
    %%%%%:  150-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  150-block  1
branch  2 never executed
branch  3 never executed
    #####:  151:                --(*IC);
    %%%%%:  151-block  0
        -:  152:            }
        -:  153:        } else
    #####:  154:            return NULL;
    %%%%%:  154-block  0
        -:  155:    }
    #####:  156:    if (instFlag){
    %%%%%:  156-block  0
branch  0 never executed
branch  1 never executed
    #####:  157:        if (!checkOperandOrder(lexTree->lexType.instType.instName,lexTree->lexType.instType.asm_inst_sets.twoOpeInstType.arrOpType,
    %%%%%:  157-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  158:                               &line->lineNum)){
    #####:  159:            printf("Error in line: %d , invalid operand \n", line->lineNum);
    %%%%%:  159-block  0
call    0 never executed
    #####:  160:            return NULL;
        -:  161:        }
        -:  162:    }
    #####:  163:    return lexTree;
    %%%%%:  163-block  0
        -:  164:}
        -:  165:
function getOperands called 0 returned 0% blocks executed 0%
    #####:  166:bool getOperands(char *str , lexStruct *lexTree, int *lineNum, symbolTable *labelTable, macroTable *macroTable){
        -:  167:    operandAddrTypeName tempArrOpName;
    #####:  168:    char *token = strtok(str, ",");
    %%%%%:  168-block  0
call    0 never executed
        -:  169:    int num;
    #####:  170:    operandAddrType  tempArrOpType=-1;
        -:  171:
    #####:  172:    while (token != NULL) {
    %%%%%:  172-block  0
branch  0 never executed
branch  1 never executed
    #####:  173:        if (lexTree->lexType.instType.asm_inst_sets.twoOpeInstType.arrOpType[0] != -1){
    %%%%%:  173-block  0
branch  0 never executed
branch  1 never executed
    #####:  174:            printf("Error in line: %d , too many operands \n", *lineNum);
    %%%%%:  174-block  0
call    0 never executed
    #####:  175:            return false;
        -:  176:        }
    #####:  177:        else if (token[0] == '@'){
    %%%%%:  177-block  0
branch  0 never executed
branch  1 never executed
    #####:  178:            if (strlen(token) == 3 && token[1] == 'r' && token[2]<='7' && token[2] >= '0'){
    %%%%%:  178-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  178-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  178-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:  178-block  3
branch  6 never executed
branch  7 never executed
    #####:  179:                tempArrOpType= registerType;
    #####:  180:                tempArrOpName.reg = token[2]-'0';
    %%%%%:  180-block  0
        -:  181:            }else{
    #####:  182:                printf("Error in line: %d , invalid register \n", *lineNum);
    %%%%%:  182-block  0
call    0 never executed
    #####:  183:                return false;
        -:  184:            }
        -:  185:        }
    #####:  186:        else if(getNumber(token,&num)){
    %%%%%:  186-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  187:            if (num > MAX_DATA_VALUE || num < MIN_DATA_VALUE) {
    %%%%%:  187-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  187-block  1
branch  2 never executed
branch  3 never executed
    #####:  188:                printf("Error in line: %d , immediate value is out of range \n", *lineNum);
    %%%%%:  188-block  0
call    0 never executed
    #####:  189:                return false;
        -:  190:            }
    #####:  191:            tempArrOpType = immediate;
    #####:  192:            tempArrOpName.immed = num;
    %%%%%:  192-block  0
        -:  193:        }
    #####:  194:        else if(isValidLabel(token,*lineNum,labelTable,macroTable)){
    %%%%%:  194-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  195:            tempArrOpType = labelType;
    #####:  196:            if ((tempArrOpName.label = getLabel(token, labelTable)) == NULL) {
    %%%%%:  196-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  197:                insertLabelTable(token, labelTable, *lineNum, &tempArrOpName.label, operandDefined,false);
    %%%%%:  197-block  0
call    0 never executed
        -:  198:            }
        -:  199:        }
        -:  200:        else{
    #####:  201:            printf("Error in line: %d , invalid operand \n", *lineNum);
    %%%%%:  201-block  0
call    0 never executed
    #####:  202:            return false;
        -:  203:        }
    #####:  204:        if ( lexTree->lexType.instType.asm_inst_sets.twoOpeInstType.arrOpType[1]!= -1){
    %%%%%:  204-block  0
branch  0 never executed
branch  1 never executed
    #####:  205:            lexTree->lexType.instType.asm_inst_sets.twoOpeInstType.arrOpType[0] = lexTree->lexType.instType.asm_inst_sets.twoOpeInstType.arrOpType[1];
    #####:  206:            lexTree->lexType.instType.asm_inst_sets.twoOpeInstType.arrOpName[0] = lexTree->lexType.instType.asm_inst_sets.twoOpeInstType.arrOpName[1] ;
    %%%%%:  206-block  0
        -:  207:        }
    #####:  208:        lexTree->lexType.instType.asm_inst_sets.twoOpeInstType.arrOpType[1] = tempArrOpType;
    #####:  209:        lexTree->lexType.instType.asm_inst_sets.twoOpeInstType.arrOpName[1] = tempArrOpName;
    #####:  210:        token = strtok(NULL, ",");
    %%%%%:  210-block  0
call    0 never executed
        -:  211:    }
    #####:  212:    return true;
    %%%%%:  212-block  0
        -:  213:
        -:  214:}
function checkOperandOrder called 0 returned 0% blocks executed 0%
    #####:  215:bool checkOperandOrder(opCode opCode, operandAddrType arrOpType[], int *lineNum){
    #####:  216:    if (opCode == 6){
    %%%%%:  216-block  0
branch  0 never executed
branch  1 never executed
    #####:  217:        if (arrOpType[0] != labelType){
    %%%%%:  217-block  0
branch  0 never executed
branch  1 never executed
    #####:  218:            printf("Error in line: %d , invalid operand \n", *lineNum);
    %%%%%:  218-block  0
call    0 never executed
    #####:  219:            return false;
        -:  220:        }
        -:  221:    }
    #####:  222:    if (opCode >= 0 && opCode  <=3 ){
    %%%%%:  222-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  222-block  1
branch  2 never executed
branch  3 never executed
    #####:  223:        if (arrOpType[0] == -1){
    %%%%%:  223-block  0
branch  0 never executed
branch  1 never executed
    #####:  224:            printf("Error in line: %d , invalid operand \n", *lineNum);
    %%%%%:  224-block  0
call    0 never executed
    #####:  225:            return false;
        -:  226:        }
        -:  227:    }
    #####:  228:    if (opCode == 1 || opCode == 12){
    %%%%%:  228-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  228-block  1
branch  2 never executed
branch  3 never executed
    #####:  229:        if (arrOpType[1] == -1){
    %%%%%:  229-block  0
branch  0 never executed
branch  1 never executed
    #####:  230:            printf("Error in line: %d , invalid operand \n", *lineNum);
    %%%%%:  230-block  0
call    0 never executed
    #####:  231:            return false;
        -:  232:        }
        -:  233:    }
    #####:  234:    if (opCode == 4 || opCode == 5 ||(opCode >=7 && opCode<=15)){
    %%%%%:  234-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  234-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  234-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:  234-block  3
branch  6 never executed
branch  7 never executed
    #####:  235:        if (arrOpType[0] != -1){
    %%%%%:  235-block  0
branch  0 never executed
branch  1 never executed
    #####:  236:            printf("Error in line: %d , invalid operand \n", *lineNum);
    %%%%%:  236-block  0
call    0 never executed
    #####:  237:            return false;
        -:  238:        }
        -:  239:    }
    #####:  240:    if (opCode == 0 || (opCode >=2 && opCode <= 11) || opCode == 13){
    %%%%%:  240-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  240-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  240-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:  240-block  3
branch  6 never executed
branch  7 never executed
    #####:  241:        if (arrOpType[1] == immediate){
    %%%%%:  241-block  0
branch  0 never executed
branch  1 never executed
    #####:  242:            return false;
    %%%%%:  242-block  0
        -:  243:        }
        -:  244:    }
    #####:  245:    if (opCode == 14 || opCode == 15){
    %%%%%:  245-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  245-block  1
branch  2 never executed
branch  3 never executed
    #####:  246:        if (arrOpType[0] != -1 || arrOpType[1] != -1){
    %%%%%:  246-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  246-block  1
branch  2 never executed
branch  3 never executed
    #####:  247:            return false;
    %%%%%:  247-block  0
        -:  248:        }
        -:  249:    }
    #####:  250:    return true;
    %%%%%:  250-block  0
        -:  251:}
function getNumber called 0 returned 0% blocks executed 0%
    #####:  252:bool getNumber(char *str, int *num){
    #####:  253:    int i=0;
    #####:  254:    if (str[0] == '-') {
    %%%%%:  254-block  0
branch  0 never executed
branch  1 never executed
    #####:  255:        i=1;
    %%%%%:  255-block  0
        -:  256:    }
    #####:  257:    for (; i < strlen(str); ++i) {
    %%%%%:  257-block  0
    %%%%%:  257-block  1
    %%%%%:  257-block  2
branch  0 never executed
branch  1 never executed
    #####:  258:        if (!isdigit(str[i])) {
    %%%%%:  258-block  0
branch  0 never executed
branch  1 never executed
    #####:  259:            return false;
    %%%%%:  259-block  0
        -:  260:        }
        -:  261:    }
    #####:  262:    *num = atoi(str);
    #####:  263:    return true;
    %%%%%:  263-block  0
        -:  264:}
function getOpCode called 0 returned 0% blocks executed 0%
    #####:  265:int getOpCode(char *str,int *lineNum,int *numOfOperands){
        -:  266:         int i;
    #####:  267:        char *opCode[] = {"mov", "cmp", "add", "sub", "not","clr","lea", "inc",
        -:  268:                          "dec", "jmp", "bne", "red", "prn", "jsr","rts", "stop"};
    #####:  269:        char *opCode1[] = {"mov", "cmp", "add", "sub", "lea"};
    #####:  270:        char *opCode2[] = { "not", "clr","inc", "dec", "jmp", "bne", "red", "prn", "jsr"};
    #####:  271:        char *opCode3[] = { "rts", "stop"};
        -:  272:
    #####:  273:        for (i = 0; i < 5; ++i) {
    %%%%%:  273-block  0
    %%%%%:  273-block  1
    %%%%%:  273-block  2
branch  0 never executed
branch  1 never executed
    #####:  274:                if (strcmp(opCode1[i], str) == 0){
    %%%%%:  274-block  0
branch  0 never executed
branch  1 never executed
    #####:  275:                    *numOfOperands=2;
    #####:  276:                    break;
    %%%%%:  276-block  0
        -:  277:                }
        -:  278:        }
    #####:  279:        for (i = 0; i < 9; ++i) {
    %%%%%:  279-block  0
    %%%%%:  279-block  1
    %%%%%:  279-block  2
branch  0 never executed
branch  1 never executed
    #####:  280:            if (strcmp(opCode2[i], str) == 0){
    %%%%%:  280-block  0
branch  0 never executed
branch  1 never executed
    #####:  281:                *numOfOperands = 1;
    #####:  282:                 break;
    %%%%%:  282-block  0
        -:  283:           }
        -:  284:         }
    #####:  285:        for (i = 0; i < 2; ++i) {
    %%%%%:  285-block  0
    %%%%%:  285-block  1
    %%%%%:  285-block  2
branch  0 never executed
branch  1 never executed
    #####:  286:            if (strcmp(opCode3[i], str) == 0){
    %%%%%:  286-block  0
branch  0 never executed
branch  1 never executed
    #####:  287:                *numOfOperands = 0;
    #####:  288:                break;
    %%%%%:  288-block  0
        -:  289:            }
        -:  290:        }
    #####:  291:        for (i = 0; i < 16; ++i) {
    %%%%%:  291-block  0
    %%%%%:  291-block  1
    %%%%%:  291-block  2
branch  0 never executed
branch  1 never executed
    #####:  292:            if (strcmp(opCode[i], str) == 0){
    %%%%%:  292-block  0
branch  0 never executed
branch  1 never executed
    #####:  293:              return  i;
    %%%%%:  293-block  0
        -:  294:        }
        -:  295:        }
    #####:  296:        return -1;
    %%%%%:  296-block  0
        -:  297:}
function getData called 0 returned 0% blocks executed 0%
    #####:  298:bool getData(const char *inputString, int *numArray, int *numCount,int *lineNum,label *label) {
        -:  299:        char buffer[100];
    #####:  300:        char *token=NULL;
        -:  301:        int count;
    #####:  302:        strcpy(buffer, inputString);
    #####:  303:        if (!isalnum(inputString[0]) || !isalnum(inputString[strlen(inputString) - 1] )) {
    %%%%%:  303-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  303-block  1
branch  2 never executed
branch  3 never executed
    #####:  304:            printf("Error in lineStr %d: invalid data\n", *lineNum);
    %%%%%:  304-block  0
call    0 never executed
    #####:  305:            return false;
        -:  306:        }
    #####:  307:        token = strtok(buffer, ",");
    %%%%%:  307-block  0
call    0 never executed
    #####:  308:        count = 0;
        -:  309:
    #####:  310:        while (token != NULL && count < 3) {
    %%%%%:  310-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  310-block  1
branch  2 never executed
branch  3 never executed
    #####:  311:            if ((count > 0 && token == inputString) || (count > 0 && token[0] == '\0')) {
    %%%%%:  311-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  311-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  311-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:  311-block  3
branch  6 never executed
branch  7 never executed
    #####:  312:                return false;
    %%%%%:  312-block  0
        -:  313:            }
    #####:  314:            numArray[count] = atoi(token);
        -:  315:
    #####:  316:            if (numArray[count] > MAX_DATA_VALUE || numArray[count] < MIN_DATA_VALUE) {
    %%%%%:  316-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  316-block  1
branch  2 never executed
branch  3 never executed
    #####:  317:                printf("Error in lineStr %d: data value is out of range\n", *lineNum);
    %%%%%:  317-block  0
call    0 never executed
    #####:  318:                return false;
        -:  319:            }
    #####:  320:            if (count == 0 && label != NULL){
    %%%%%:  320-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  320-block  1
branch  2 never executed
branch  3 never executed
    #####:  321:                label->data = numArray[count];
    %%%%%:  321-block  0
        -:  322:            }
    #####:  323:            token = strtok(NULL, ",");
    %%%%%:  323-block  0
call    0 never executed
    #####:  324:            count++;
        -:  325:        }
    #####:  326:        *numCount = count;
    #####:  327:    return true;
    %%%%%:  327-block  0
        -:  328:}
function makeStringBitArray called 0 returned 0% blocks executed 0%
    #####:  329:void makeStringBitArray(char *str ,bitLine *stringBitArray){
        -:  330:    int i;
    #####:  331:    for (i = 0; i < strlen(str); ++i) {
    %%%%%:  331-block  0
    %%%%%:  331-block  1
branch  0 never executed
branch  1 never executed
    #####:  332:        stringBitArray[i].lineByteCode = str[i];
    %%%%%:  332-block  0
        -:  333:    }
    #####:  334:    stringBitArray[i].lineByteCode = 0;
    #####:  335:}
function isValidLabel called 0 returned 0% blocks executed 0%
    #####:  336:bool isValidLabel (char *label, int linNum, symbolTable *labelList, macroTable *macroTable) {
    #####:  337:    int i = 0;
    #####:  338:    if (strlen(label) > MAX_LABEL_SIZE) {
    %%%%%:  338-block  0
branch  0 never executed
branch  1 never executed
    #####:  339:        printf("Error in lineStr %d: label is too long\n", linNum);
    %%%%%:  339-block  0
call    0 never executed
    #####:  340:        return false;
        -:  341:    }
    #####:  342:    if (!isalpha(label[0])) {
    %%%%%:  342-block  0
branch  0 never executed
branch  1 never executed
    #####:  343:        printf("Error in lineStr %d: label must start with a letter\n", linNum);
    %%%%%:  343-block  0
call    0 never executed
    #####:  344:        return false;
        -:  345:    }
    #####:  346:    for ( i = 0;i<strlen(label);i++){
    %%%%%:  346-block  0
    %%%%%:  346-block  1
    %%%%%:  346-block  2
branch  0 never executed
branch  1 never executed
    #####:  347:        if (!isalnum(label[i])){
    %%%%%:  347-block  0
branch  0 never executed
branch  1 never executed
    #####:  348:            printf("Error in lineStr %d: label must contain only letters and numbers\n", linNum);
    %%%%%:  348-block  0
call    0 never executed
    #####:  349:            return false;
        -:  350:        }
        -:  351:    }
    #####:  352:    if(!checkValidMacroName(macroTable,label,linNum)){
    %%%%%:  352-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  353:        return false;
    %%%%%:  353-block  0
        -:  354:    }
    #####:  355:return true;
    %%%%%:  355-block  0
        -:  356:}
function getLabel called 0 returned 0% blocks executed 0%
    #####:  357:label *getLabel(char *label, symbolTable *labelList){
    #####:  358:    char *temp = NULL ;
    #####:  359:    int i = 0;
    #####:  360:    for (i = 0; i < labelList->capacity; ++i) {
    %%%%%:  360-block  0
    %%%%%:  360-block  1
    %%%%%:  360-block  2
branch  0 never executed
branch  1 never executed
    #####:  361:        temp = labelList->labels[i]->symbolName;
    #####:  362:        if (strcmp(label, temp) == 0) {
    %%%%%:  362-block  0
branch  0 never executed
branch  1 never executed
    #####:  363:            return labelList->labels[i];
    %%%%%:  363-block  0
        -:  364:        }
        -:  365:    }
    #####:  366:    return NULL;
    %%%%%:  366-block  0
        -:  367:}
        -:  368:
function insertLabelTable called 0 returned 0% blocks executed 0%
    #####:  369:void insertLabelTable(char *l, symbolTable *labelTable, int lineNum, label **currentLabel, lDType type,bool defined){
    #####:  370:    label *label = NULL;
    #####:  371:    ALLOCATE(label, sizeof(label));
    %%%%%:  371-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  371-block  1
call    2 never executed
call    3 never executed
    #####:  372:    ALLOCATE(label->symbolName, sizeof(char)*strlen(l));
    %%%%%:  372-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  372-block  1
call    2 never executed
call    3 never executed
    #####:  373:    strncpy(label->symbolName, l, strlen(l));
    #####:  374:    label->symbolName[strlen(l)] = '\0';
    #####:  375:    label->defineType = type;
    #####:  376:    label->address = 0;
    #####:  377:    label->defined = defined;
    #####:  378:    if (labelTable->size == labelTable->capacity) {
    %%%%%:  378-block  0
branch  0 never executed
branch  1 never executed
    #####:  379:        labelTable->size += 10;
    #####:  380:        REALLOCTION(*labelTable->labels, labelTable->size);
    %%%%%:  380-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  380-block  1
    %%%%%:  380-block  2
call    2 never executed
call    3 never executed
        -:  381:    }
    #####:  382:    *currentLabel = label;
    #####:  383:    labelTable->labels[labelTable->capacity++] = label;
    #####:  384:}
